<canvas
  class="fixed top-0 left-0 pointer-events-none z-50"
  id="canvas"
  width="1512"
  height="857"
>
</canvas>

<script>
  interface WaveParams {
    phase?: number;
    offset?: number;
    frequency?: number;
    amplitude?: number;
  }

  interface LineParams {
    spring: number;
  }

  interface Position {
    x: number;
    y: number;
  }

  interface Node {
    x: number;
    y: number;
    vx: number;
    vy: number;
  }

  interface CanvasContext extends CanvasRenderingContext2D {
    running: boolean;
    frame: number;
  }

  interface EffectSettings {
    debug: boolean;
    friction: number;
    trails: number;
    size: number;
    dampening: number;
    tension: number;
  }

  class Wave {
    phase: number = 0;
    offset: number = 0;
    frequency: number = 0.001;
    amplitude: number = 1;
    value: number = 0;

    constructor(params: WaveParams = {}) {
      this.init(params);
    }

    init(params: WaveParams): void {
      this.phase = params.phase || 0;
      this.offset = params.offset || 0;
      this.frequency = params.frequency || 0.001;
      this.amplitude = params.amplitude || 1;
      this.value = 0;
    }

    update(): number {
      this.phase += this.frequency;
      this.value = this.offset + Math.sin(this.phase) * this.amplitude;
      return this.value;
    }

    getValue(): number {
      return this.value;
    }
  }

  class TrailNode implements Node {
    x: number = 0;
    y: number = 0;
    vx: number = 0;
    vy: number = 0;
  }

  class TrailLine {
    spring: number = 0;
    friction: number = 0;
    nodes: TrailNode[] = [];

    constructor(params: LineParams) {
      this.init(params);
    }

    init(params: LineParams): void {
      this.spring = params.spring + 0.1 * Math.random() - 0.05;
      this.friction = settings.friction + 0.01 * Math.random() - 0.005;
      this.nodes = [];

      for (let i = 0; i < settings.size; i++) {
        const node = new TrailNode();
        node.x = position.x;
        node.y = position.y;
        this.nodes.push(node);
      }
    }

    update(): void {
      let spring = this.spring;
      let node = this.nodes[0];

      node.vx += (position.x - node.x) * spring;
      node.vy += (position.y - node.y) * spring;

      for (let i = 0, len = this.nodes.length; i < len; i++) {
        node = this.nodes[i];
        
        if (i > 0) {
          const prev = this.nodes[i - 1];
          node.vx += (prev.x - node.x) * spring;
          node.vy += (prev.y - node.y) * spring;
          node.vx += prev.vx * settings.dampening;
          node.vy += prev.vy * settings.dampening;
        }
        
        node.vx *= this.friction;
        node.vy *= this.friction;
        node.x += node.vx;
        node.y += node.vy;
        spring *= settings.tension;
      }
    }

    draw(context: CanvasContext): void {
      let x = this.nodes[0].x;
      let y = this.nodes[0].y;

      context.beginPath();
      context.moveTo(x, y);

      for (let i = 1, len = this.nodes.length - 2; i < len; i++) {
        const curr = this.nodes[i];
        const next = this.nodes[i + 1];
        x = 0.5 * (curr.x + next.x);
        y = 0.5 * (curr.y + next.y);
        
        context.quadraticCurveTo(curr.x, curr.y, x, y);
      }

      const curr = this.nodes[this.nodes.length - 2];
      const next = this.nodes[this.nodes.length - 1];
      context.quadraticCurveTo(curr.x, curr.y, next.x, next.y);

      context.stroke();
      context.closePath();
    }
  }

  let context: CanvasContext | null = null;
  let wave: Wave | null = null;
  let position: Position = { x: 0, y: 0 };
  let lines: TrailLine[] = [];
  
  const settings: EffectSettings = {
    debug: false,
    friction: 0.5,
    trails: 50,
    size: 25,
    dampening: 0.025,
    tension: 0.99,
  };

  function initLines(): void {
    lines = [];
    for (let i = 0; i < settings.trails; i++) {
      lines.push(new TrailLine({ 
        spring: 0.45 + (i / settings.trails) * 0.025 
      }));
    }
  }

  function handlePointerMove(e: MouseEvent | TouchEvent): void {
    if ('touches' in e) {
      if (e.touches.length > 0) {
        position.x = e.touches[0].pageX;
        position.y = e.touches[0].pageY;
      }
    } else {
      position.x = e.clientX;
      position.y = e.clientY;
    }
    
    e.preventDefault();
  }

  function handleTouchStart(e: TouchEvent): void {
    if (e.touches.length === 1) {
      position.x = e.touches[0].pageX;
      position.y = e.touches[0].pageY;
    }
  }

  function startAnimation(e: MouseEvent | TouchEvent): void {
    document.removeEventListener("mousemove", startAnimation);
    document.removeEventListener("touchstart", startAnimation);
    
    document.addEventListener("mousemove", handlePointerMove);
    document.addEventListener("touchmove", handlePointerMove);
    document.addEventListener("touchstart", handleTouchStart);
    
    handlePointerMove(e);
    initLines();
    render();
  }

  function render(): void {
    if (!context || !context.running) return;

    context.globalCompositeOperation = "source-over";
    context.clearRect(0, 0, context.canvas.width, context.canvas.height);
    context.globalCompositeOperation = "lighter";
    
    context.strokeStyle = "rgba(255, 255, 255, 0.025)";
    
    context.lineWidth = 10;
    
    for (let i = 0; i < settings.trails; i++) {
      const line = lines[i];
      line.update();
      line.draw(context);
    }

    context.frame++;
    window.requestAnimationFrame(render);
  }

  function resizeCanvas(): void {
    if (!context) return;
    
    const canvas = context.canvas;
    canvas.width = window.innerWidth - 20;
    canvas.height = window.innerHeight;
  }

  // Initialize the canvas and cursor effect
  document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById("canvas") as HTMLCanvasElement;
    if (!canvas) return;
    
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    
    context = ctx as CanvasContext;
    context.running = true;
    context.frame = 1;
    
    wave = new Wave({
      phase: Math.random() * 2 * Math.PI,
      amplitude: 85,
      frequency: 0.0015,
      offset: 285,
    });
    
    document.addEventListener("mousemove", startAnimation);
    document.addEventListener("touchstart", startAnimation);
    document.body.addEventListener("orientationchange", resizeCanvas);
    window.addEventListener("resize", resizeCanvas);
    
    window.addEventListener("focus", () => {
      if (context && !context.running) {
        context.running = true;
        render();
      }
    });
    
    window.addEventListener("blur", () => {
      if (context) {
        context.running = true;
      }
    });
    
    resizeCanvas();
  });
</script> 